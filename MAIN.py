import streamlit as st
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import re
import time
import google.generativeai as genai
import urllib.parse
from datetime import datetime
from selenium.webdriver.chrome.options import Options
import random

# -------------------- Streamlit Page Config --------------------
st.set_page_config(
    page_title="Pantip Social Listener",
    page_icon="üëÇ",
    layout="centered",
    initial_sidebar_state="expanded"
)
st.title("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ Pantip ‡∏î‡πâ‡∏ß‡∏¢ AI")

# -------------------- Session State Initialization --------------------
if "api_key" not in st.session_state:
    st.session_state["api_key"] = None
if "model_choice" not in st.session_state:
    st.session_state["model_choice"] = None

# -------------------- Sidebar: API Key & Model Selection --------------------
st.sidebar.markdown("## üîë Configuration")
api_key = st.sidebar.text_input(
    "Google Gemini API Key",
    value=st.session_state.get("api_key", ""),
    type="password",
    help="‡πÉ‡∏™‡πà Google Gemini API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å https://makersuite.google.com/app/apikey)"
)
st.session_state["api_key"] = api_key
if not api_key:
    st.sidebar.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

st.sidebar.markdown("---")
st.sidebar.markdown("## ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI")
model_choice = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini",
    options=[
        "gemini-2.5-pro",
        "gemini-2.5-flash",
        "gemini-2.5-flash-lite-preview-06-17",
        "gemini-2.0-flash",
        "gemini-2.0-flash-lite"
    ],
    index=1,
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ"
)
st.session_state["model_choice"] = model_choice

# Optional: Sentiment analysis toggle
st.sidebar.markdown("## üß† ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
sentiment_toggle = st.sidebar.toggle(
    "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (Basic Sentiment Analysis)", value=True
)

# Show model info
model_info = {
    "gemini-2.5-pro": "üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å",
    "gemini-2.5-flash": "‚ö° ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)",
    "gemini-2.5-flash-lite-preview-06-17": "üß™ ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token ‡∏°‡∏≤‡∏Å",
    "gemini-2.0-flash": "‚ö° ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token",
    "gemini-2.0-flash-lite": "üß™ ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token ‡∏°‡∏≤‡∏Å"
}
st.sidebar.info(model_info[model_choice])

# API Key Test
if api_key:
    genai.configure(api_key=api_key)
    try:
        model = genai.GenerativeModel(model_choice)
        st.sidebar.markdown("---")
        st.sidebar.markdown("## üìä API Status")
        st.sidebar.success(f"ü§ñ ‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_choice}")
        st.sidebar.info("üí° ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà [Google AI Studio](https://makersuite.google.com/app/apikey)")
        if st.sidebar.button("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö API..."):
                try:
                    test_response = model.generate_content("Hello, respond in Thai")
                    st.sidebar.success("‚úÖ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                    if hasattr(test_response, 'usage_metadata'):
                        st.sidebar.write(f"**Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:** {test_response.usage_metadata.total_token_count}")
                except Exception as e:
                    st.sidebar.error(f"‚ùå API Error: {e}")
    except Exception as e:
        st.sidebar.error(f"‚ùå API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}")

# -------------------- Main Content: User Inputs --------------------
keyword = st.text_input(
    "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (Keyword)",
    value=st.session_state.get("keyword", ""),
)
st.session_state["keyword"] = keyword

sort_options = ["‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"]
sort_option = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (Sort by)",
    options=sort_options,
    index=sort_options.index(st.session_state.get("sort_option", "‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")),
)
st.session_state["sort_option"] = sort_option

max_posts = st.number_input(
    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Max posts)",
    min_value=1, max_value=30,
    value=st.session_state.get("max_posts", 15),
    step=1
)
st.session_state["max_posts"] = max_posts

date_filter = st.date_input(
    "‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (Filter posts after date)",
    value=st.session_state.get("date_filter", None),
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
)
st.session_state["date_filter"] = date_filter

# -------------------- Build Pantip Search URL --------------------
keyword_encoded = urllib.parse.quote_plus(keyword)
if sort_option == "‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î":
    search_url = f"https://pantip.com/search?q={keyword_encoded}&timebias=true"
else:
    search_url = f"https://pantip.com/search?q={keyword_encoded}"

st.write(f"Pantip Search URL: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà]({search_url})")

# -------------------- Scrape Pantip Threads --------------------
def parse_thai_date(date_str):
    """
    Parse Thai date string like '21 ‡∏°‡∏¥.‡∏¢. 67' to datetime object.
    Returns None if parsing fails.
    """
    try:
        thai_months = {
            '‡∏°.‡∏Ñ.': 1, '‡∏Å.‡∏û.': 2, '‡∏°‡∏µ.‡∏Ñ.': 3, '‡πÄ‡∏°.‡∏¢.': 4, '‡∏û.‡∏Ñ.': 5, '‡∏°‡∏¥.‡∏¢.': 6,
            '‡∏Å.‡∏Ñ.': 7, '‡∏™.‡∏Ñ.': 8, '‡∏Å.‡∏¢.': 9, '‡∏ï.‡∏Ñ.': 10, '‡∏û.‡∏¢.': 11, '‡∏ò.‡∏Ñ.': 12
        }
        parts = date_str.strip().split()
        if len(parts) != 3:
            return None
        day = int(parts[0])
        month = thai_months.get(parts[1])
        year = int(parts[2])
        if year < 100:
            year += 2500
        year -= 543
        if month is None:
            return None
        return datetime(year, month, day)
    except Exception:
        return None

# -------------------- Main Button: Summarize Pantip Threads --------------------
if st.button("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ Pantip", disabled=not api_key or not keyword):
    if not api_key:
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    elif not keyword:
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    else:
        st.info(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {max_posts} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ | Keyword: {keyword} | Sort: {sort_option}")

        # --- Start Selenium Browser ---
        with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-logging")
            chrome_options.add_argument("--log-level=3")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--disable-images")
            chrome_options.add_argument("--disable-plugins")
            chrome_options.add_argument("--disable-software-rasterizer")
            chrome_options.add_argument("--disable-background-timer-throttling")
            chrome_options.add_argument("--disable-backgrounding-occluded-windows")
            chrome_options.add_argument("--disable-renderer-backgrounding")

            driver = webdriver.Chrome(options=chrome_options)
            driver.get(search_url)
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "li.pt-list-item h2 a"))
            )

        # --- Load More Results if Needed ---
        with st.spinner("üìú ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..."):
            max_tries = 10
            for _ in range(max_tries):
                threads = driver.find_elements(By.CSS_SELECTOR, "li.pt-list-item h2 a")
                if len(threads) >= max_posts:
                    break
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(1)

        # --- Parse Search Results ---
        with st.spinner("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ..."):
            soup = BeautifulSoup(driver.page_source, "html.parser")
            threads = soup.select("li.pt-list-item h2 a")[:max_posts]
            thread_urls = [t['href'] if t['href'].startswith("http") else "https://pantip.com" + t['href'] for t in threads]

            all_forums_text = []

            # Filter by date if needed
            if date_filter:
                filtered_urls = []
                date_elements = soup.select("li.pt-list-item .pt-sm-toggle-date-hide")
                for i, url in enumerate(thread_urls):
                    if i < len(date_elements):
                        date_str = date_elements[i].get_text(strip=True)
                        post_date = parse_thai_date(date_str)
                        if post_date and post_date.date() >= date_filter:
                            filtered_urls.append(url)
                thread_urls = filtered_urls
                st.info(f"üìÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {len(thread_urls)} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_filter}")
            else:
                st.info(f"üìä ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ‡∏£‡∏ß‡∏° {len(thread_urls)} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")

            if not thread_urls:
                st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                st.stop()

        # --- Scrape Each Thread ---
        st.info("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ...")
        progress_bar = st.progress(0)
        status_text = st.empty()

        for i, url in enumerate(thread_urls):
            progress = (i + 1) / len(thread_urls)
            progress_bar.progress(progress)
            status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà {i+1}/{len(thread_urls)}")
            try:
                driver.get(url)
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "display-post-story"))
                )
                # Click all "see more replies" buttons
                for _ in range(3):
                    see_more_buttons = driver.find_elements(By.CSS_SELECTOR, "a.reply.see-more")
                    if not see_more_buttons:
                        break
                    for btn in see_more_buttons:
                        driver.execute_script("arguments[0].click();", btn)
                        time.sleep(0.1)
                try:
                    WebDriverWait(driver, 5).until(
                        lambda d: len(d.find_elements(By.CLASS_NAME, "display-post-story")) > 1
                    )
                except Exception:
                    pass
                time.sleep(1)
                soup = BeautifulSoup(driver.page_source, "html.parser")
                header = soup.find("h2", {"class": "display-post-title"})
                forum_texts = []
                if header:
                    forum_texts.append(f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : {header.text}")
                comments = soup.find_all("div", {"class": "display-post-story"})
                for idx, comment in enumerate(comments, start=0):
                    text = comment.get_text(separator=" ", strip=True)
                    text = re.sub(r'\s+', ' ', text)
                    label = f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ : {text}" if idx == 0 else f"‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà {idx} : {text}"
                    forum_texts.append(label)
                all_forums_text.append("\n".join(forum_texts))
                st.session_state["all_forums_text"] = all_forums_text
                time.sleep(0.5)
                time.sleep(0.2)
                time.sleep(random.uniform(1, 2))
            except Exception as e:
                st.warning(f"Error scraping {url}: {e}")
                continue

        progress_bar.empty()
        status_text.empty()

        with st.spinner("üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå..."):
            driver.quit()

        st.success(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {len(all_forums_text)} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")

        # --- Prepare Data for AI ---
        with st.spinner("üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI..."):
            input_for_llm = "\n\n".join(all_forums_text)
            st.session_state["input_for_llm"] = input_for_llm
            with st.expander("üîé ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π/‡∏ã‡πà‡∏≠‡∏ô)", expanded=False):
                st.text_area(
                    "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤",
                    st.session_state["input_for_llm"],
                    height=300,
                    key="input_for_llm_preview",
                    disabled=True
                )

            model = genai.GenerativeModel(model_choice)
            prompt_parts = [
                "You are a LLM-powered social-listening application, tasked to summarize Pantip posts and comments into aspects in THAI LANGUAGE.",
                "Here are the texts you need to summarize:",
                st.session_state["input_for_llm"],
                "Summarize the information into each aspect in this format:",
                "**‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠**: {summary}",
                "**{aspect1}**: {aspect1_summary}",
                "**{aspect2}**: {aspect2_summary}",
                "and so on...",
                "Aspect is not the same as thread, it is what have been discussed.",
                "You must response in the format above.",
                "You must response in THAI LANGUAGE only.",
                "Every paragraph MUST have a new line between them"
            ]
            if sentiment_toggle:
                prompt_parts.insert(-2, "For each aspect, add a new line below the summary in this format:\n**‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (Sentiment)**: <label> (positiveüòÑ, neutralüòê, or negativeüò°)")
            prompt = "\n".join(prompt_parts)

        # --- AI Summarization ---
        with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ Gemini AI... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
            try:
                response = model.generate_content(prompt)
                st.success("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                if hasattr(response, 'usage_metadata'):
                    st.info(f"üî¢ Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {response.usage_metadata.total_token_count} "
                            f"(Input: {response.usage_metadata.prompt_token_count}, "
                            f"Output: {response.usage_metadata.candidates_token_count})")
                st.session_state["llm_summary"] = response.text
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: {e}")

# -------------------- Show Latest Summary --------------------
if "llm_summary" in st.session_state and st.session_state["llm_summary"]:
    st.markdown("---")
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏†‡∏≤‡∏©‡∏≤")
    st.markdown(st.session_state["llm_summary"])

# -------------------- Show Input Preview --------------------
if "input_for_llm" in st.session_state:
    st.markdown("---")
    with st.expander("üîé ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π/‡∏ã‡πà‡∏≠‡∏ô)", expanded=False):
        st.text_area(
            "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤",
            st.session_state["input_for_llm"],
            height=300,
            key="input_for_llm_preview",
            disabled=False
        )

# -------------------- Regenerate Summary with Selected Threads --------------------
if "input_for_llm" in st.session_state:
    st.markdown("---")
    st.markdown("### üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    if "all_forums_text" in st.session_state and st.session_state["all_forums_text"]:
        if len(st.session_state.get("selected_forums", [])) != len(st.session_state["all_forums_text"]):
            st.session_state["selected_forums"] = [True] * len(st.session_state["all_forums_text"])

        forum_options = []
        for i, forum_text in enumerate(st.session_state["all_forums_text"]):
            lines = forum_text.split('\n')
            title = lines[0] if lines else f"‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà {i+1}"
            if title.startswith("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : "):
                title = title.replace("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : ", "", 1)
            if len(title) > 60:
                title = title[:60] + "..."
            forum_options.append(f"{i+1}. {title}")

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", key="select_all"):
                st.session_state["selected_forums"] = [True] * len(st.session_state["all_forums_text"])
                st.rerun()
        with col2:
            if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", key="deselect_all"):
                st.session_state["selected_forums"] = [False] * len(st.session_state["all_forums_text"])
                st.rerun()

        st.markdown("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
        currently_selected = [i for i, selected in enumerate(st.session_state.get("selected_forums", [])) if selected]
        currently_selected_options = [forum_options[i] for i in currently_selected]

        def update_selected_forums():
            selected_options = st.session_state["forum_multiselect"]
            selected_forums = [False] * len(st.session_state["all_forums_text"])
            for option in selected_options:
                index = int(option.split('.')[0]) - 1
                selected_forums[index] = True
            st.session_state["selected_forums"] = selected_forums

        selected_options = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ:",
            options=forum_options,
            default=currently_selected_options,
            key="forum_multiselect",
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏°‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
            on_change=update_selected_forums
        )

        st.session_state["selected_forums"] = [False] * len(st.session_state["all_forums_text"])
        for option in selected_options:
            index = int(option.split('.')[0]) - 1
            st.session_state["selected_forums"][index] = True

        selected_count = sum(st.session_state["selected_forums"])
        total_count = len(st.session_state["all_forums_text"])

        if selected_count == 0:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")
        else:
            st.info(f"üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {selected_count}/{total_count} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")
            if st.toggle("üîç ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", value=False):
                for i, forum_text in enumerate(st.session_state["all_forums_text"]):
                    if st.session_state["selected_forums"][i]:
                        lines = forum_text.split('\n')
                        title = lines[0]
                        if title.startswith("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : "):
                            title = title.replace("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : ", "", 1)
                        preview = forum_text
                        with st.expander(f"üìÑ{i+1}. {title}", expanded=False):
                            st.text(preview)

    regenerate_disabled = (
        not st.session_state.get("all_forums_text") or 
        not any(st.session_state.get("selected_forums", []))
    )

    if st.button("üîÑ ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ AI (‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", disabled=regenerate_disabled):
        if not st.session_state.get("all_forums_text"):
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
        elif not any(st.session_state.get("selected_forums", [])):
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")
        else:
            with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ Gemini AI... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                try:
                    selected_forums_text = [
                        forum_text for i, forum_text in enumerate(st.session_state["all_forums_text"])
                        if st.session_state["selected_forums"][i]
                    ]
                    filtered_input_for_llm = "\n\n".join(selected_forums_text)
                    selected_count = len(selected_forums_text)
                    st.info(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {selected_count} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                    with st.expander("üîé ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", expanded=False):
                        st.text_area("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤", filtered_input_for_llm, height=300, key="filtered_input")
                    model = genai.GenerativeModel(model_choice)
                    prompt_parts = [
                        "You are a LLM-powered social-listening application, tasked to summarize Pantip posts and comments into aspects in THAI LANGUAGE.",
                        "Here are the texts you need to summarize:",
                        filtered_input_for_llm,
                        "Summarize the information into each aspect in this format:",
                        "**‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠**: {summary}",
                        "**{aspect1}**: {aspect1_summary}",
                        "**{aspect2}**: {aspect2_summary}",
                        "and so on...",
                        "Aspect is not the same as thread, it is what have been discussed.",
                        "You must response in the format above.",
                        "You must response in THAI LANGUAGE only.",
                        "Every paragraph MUST have a new line between them"
                    ]
                    if sentiment_toggle:
                        prompt_parts.insert(-2, "For each aspect, add a new line below the summary in this format:\n**‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (Sentiment)**: <label> (positiveüòÑ, neutralüòê, or negativeüò°)")
                    prompt = "\n".join(prompt_parts)
                    response = model.generate_content(prompt)
                    st.success(f"‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! (‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {selected_count} ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ)")
                    if hasattr(response, 'usage_metadata'):
                        st.info(f"üî¢ Token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {response.usage_metadata.total_token_count} "
                                f"(Input: {response.usage_metadata.prompt_token_count}, "
                                f"Output: {response.usage_metadata.candidates_token_count})")
                    st.session_state["llm_summary"] = response.text
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: {e}")

# -------------------- Sidebar Instructions --------------------
st.sidebar.markdown("---")
st.sidebar.markdown("## üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
st.sidebar.markdown("1. ‡∏£‡∏±‡∏ö API Key ‡∏à‡∏≤‡∏Å [Google AI Studio](https://makersuite.google.com/app/apikey)")
st.sidebar.markdown("2. ‡πÉ‡∏™‡πà API Key ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
st.sidebar.markdown("3. ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
st.sidebar.markdown("4. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ Pantip'")

st.sidebar.markdown("---")
st.sidebar.markdown("## ‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
st.sidebar.markdown("- ‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Pantip")
st.sidebar.markdown("- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢ AI")
st.sidebar.markdown("- API Key ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
st.sidebar.markdown("- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà [Google AI Studio](https://makersuite.google.com/app/apikey)")

# Store latest user input in session state for other pages
keyword = st.session_state["keyword"]
sort_option = st.session_state["sort_option"]
import streamlit as st
import pandas as pd
import plotly.express as px
import re
import json
import google.generativeai as genai

# -------------------- Streamlit Page Config --------------------
st.set_page_config(
    page_title="Dashboard",
    page_icon="üìä",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("üìä Dashboard")

# -------------------- Helper Functions --------------------

def extract_aspects_from_summary(summary_text):
    """
    Extract aspect names from the AI summary.
    Ignores unwanted aspects like 'Sentiment' and 'N/A'.
    """
    aspect_pattern = re.compile(r"\*\*(.+?)\*\*:")
    aspects = []
    for line in summary_text.splitlines():
        match = aspect_pattern.match(line)
        if match and "‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏¢‡πà‡∏≠" not in match.group(1):
            aspects.append(match.group(1).strip())
    aspects = [a for a in aspects if a not in ["‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (Sentiment)", "Sentiment", "N/A"]]
    return aspects

def extract_all_comments_by_forum(forums_text):
    """
    Extracts all comments from each forum thread.
    Returns a list of (forum_title, comments_list).
    """
    forums_comments = []
    for forum_text in forums_text:
        lines = forum_text.split('\n')
        title = lines[0]
        if title.startswith("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : "):
            title = title.replace("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : ", "", 1)
        comments = [line.split(":", 1)[-1].strip() for line in lines if line.startswith("‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà")]
        forums_comments.append((title, comments))
    return forums_comments

def get_aspect_sentiment_for_forums(forums_comments, aspects, model):
    """
    Uses the LLM to analyze each comment for aspect and sentiment.
    Returns a list of dicts with comment, aspect, and sentiment.
    """
    all_results = []
    for idx, (title, comments) in enumerate(forums_comments):
        if not comments:
            continue
        prompt = (
            f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ: {title}\n"
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Pantip\n"
            "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏ Aspect (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å: " +
            ", ".join(aspects) +
            ") ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (Sentiment) ‡∏à‡∏≤‡∏Å 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô positive, neutral, ‡∏´‡∏£‡∏∑‡∏≠ negative\n"
            "‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON list ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏ä‡πà‡∏ô:\n"
            '[{"comment": "...", "aspect": "...", "sentiment": "..."}]\n\n'
            "Comments:\n"
        )
        for i, comment in enumerate(comments, 1):
            prompt += f"{i}. {comment}\n"
        response = model.generate_content(prompt)
        st.write(f"## DEBUG: LLM raw response (forum {idx+1})")
        st.write(response.text)
        json_text = response.text.strip()
        if not json_text:
            continue
        if not json_text.startswith("["):
            match = re.search(r"(\[.*\])", json_text, re.DOTALL)
            if match:
                json_text = match.group(1)
            else:
                continue
        try:
            result = json.loads(json_text)
            all_results.extend(result)
        except Exception as e:
            st.error(f"JSON decode error: {e}")
            continue
    return all_results

def clean_aspect_names(aspects):
    """
    Cleans aspect names to keep only the Thai part before any parenthesis.
    Removes English-only aspects and duplicates.
    """
    cleaned = []
    for a in aspects:
        th = re.sub(r"\s*\(.*?\)", "", a).strip()
        if re.search(r"[\u0E00-\u0E7F]", th) and th not in ["", "N/A"]:
            cleaned.append(th)
    # Remove duplicates while preserving order
    seen = set()
    result = []
    for x in cleaned:
        if x not in seen:
            seen.add(x)
            result.append(x)
    # Add "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" if not already present
    if "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" not in result:
        result.append("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
    return result

# -------------------- Main UI Logic --------------------

# Check for required session state
if "all_forums_text" not in st.session_state or not st.session_state["all_forums_text"]:
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô")
    st.stop()

forums = st.session_state["all_forums_text"]

st.header("‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: **{len(forums)}**")

# Show table of threads and comment counts
data = []
for i, forum_text in enumerate(forums):
    lines = forum_text.split('\n')
    title = lines[0]
    if title.startswith("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : "):
        title = title.replace("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ : ", "", 1)
    num_comments = sum(1 for line in lines if line.startswith("‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà"))
    data.append({
        "Thread": f"{i+1}. {title[:40]}{'...' if len(title) > 40 else ''}",
        "Comments": num_comments
    })
df = pd.DataFrame(data)
st.subheader("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")
st.dataframe(df, use_container_width=True)
st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ")
fig = px.bar(df, x="Thread", y="Comments", labels={"Thread": "‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ", "Comments": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"})
st.plotly_chart(fig, use_container_width=True)

# --- Summary Reference Section ---
st.markdown("---")
st.header("üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å AI (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)")

if "llm_summary" in st.session_state and st.session_state["llm_summary"]:
    with st.expander("ü§ñ ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å AI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", expanded=False):
        st.markdown(st.session_state["llm_summary"])
        if "summary_generated_at" in st.session_state:
            st.caption(f"‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠: {st.session_state['summary_generated_at']}")
else:
    st.info("üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å AI - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏Å‡πà‡∏≠‡∏ô")

# --- Aspect & Sentiment Extraction and Visualization ---
st.markdown("---")
st.header("üîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect ‡πÅ‡∏•‡∏∞ Sentiment (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå)")

# Only show the button if we have a summary and API key
if "input_for_llm" in st.session_state and st.session_state.get("input_for_llm") and st.session_state.get("all_forums_text"):
    if st.button("üöÄ INITIALIZE: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"):
        # Check for API key and model
        if "api_key" not in st.session_state or not st.session_state["api_key"]:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
            st.stop()
        try:
            genai.configure(api_key=st.session_state["api_key"])
            model_choice = st.session_state.get("model_choice", "gemini-2.5-flash")
            model = genai.GenerativeModel(model_choice)
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• AI: {e}")
            st.stop()

        with st.spinner("üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Aspect ‡∏à‡∏≤‡∏Å‡∏™‡∏£‡∏∏‡∏õ..."):
            aspects = extract_aspects_from_summary(st.session_state.get("llm_summary", ""))
            aspects = clean_aspect_names(aspects)
            st.write("## DEBUG: Aspects ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö LLM")
            st.write(aspects)
            if not aspects:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Aspect ‡πÉ‡∏ô‡∏™‡∏£‡∏∏‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡∏°‡πà")
                st.stop()
        with st.spinner("üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î..."):
            forums_comments = extract_all_comments_by_forum(st.session_state["all_forums_text"])
            if not forums_comments:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                st.stop()
        with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI..."):
            aspect_sentiment_results = get_aspect_sentiment_for_forums(forums_comments, aspects, model)
            if not aspect_sentiment_results:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
                st.stop()
            st.session_state["comment_aspect_sentiment"] = aspect_sentiment_results
            st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

# --- Visualization Section ---
if "comment_aspect_sentiment" in st.session_state and st.session_state["comment_aspect_sentiment"]:
    df_aspect = pd.DataFrame(st.session_state["comment_aspect_sentiment"])
    st.subheader("Pie Chart: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Sentiment ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Aspect (‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö)")

    # Sort aspects so "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" is always last
    aspects_order = [a for a in df_aspect["aspect"].unique() if a != "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]
    if "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" in df_aspect["aspect"].unique():
        aspects_order.append("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")

    sentiment_color_map = {"positive": "green", "negative": "red", "neutral": "gray"}
    sentiment_thai = {"positive": "POSITIVE", "negative": "NEGATIVE", "neutral": "NEUTRAL"}
    sentiment_color_html = {"positive": "#21ba45", "negative": "#db2828", "neutral": "#767676"}

    n_cols = 3
    for i in range(0, len(aspects_order), n_cols):
        cols = st.columns(n_cols)
        for j, aspect in enumerate(aspects_order[i:i+n_cols]):
            with cols[j]:
                st.markdown(
                    f"<div style='text-align:center;font-weight:bold;height:2.2em;line-height:1.1em;display:flex;align-items:center;justify-content:center;margin-bottom:0em;margin-top:0em'>{aspect}</div>",
                    unsafe_allow_html=True
                )
                df_aspect_sub = df_aspect[df_aspect["aspect"] == aspect]
                sentiment_counts = df_aspect_sub["sentiment"].value_counts().reset_index()
                sentiment_counts.columns = ["sentiment", "count"]

                # Find dominant sentiment (NEGATIVE wins ties, but if positive==negative, set to neutral)
                if not sentiment_counts.empty:
                    max_count = sentiment_counts["count"].max()
                    dominant_sentiments = sentiment_counts[sentiment_counts["count"] == max_count]["sentiment"].tolist()
                    if "positive" in dominant_sentiments and "negative" in dominant_sentiments and len(dominant_sentiments) == 2:
                        dominant_sentiment = "neutral"
                    elif "negative" in dominant_sentiments:
                        dominant_sentiment = "negative"
                    elif "positive" in dominant_sentiments:
                        dominant_sentiment = "positive"
                    else:
                        dominant_sentiment = dominant_sentiments[0]
                    color = sentiment_color_html.get(dominant_sentiment, "#767676")
                    st.markdown(
                        f"<div style='text-align:center;font-weight:bold;color:{color};margin-bottom:0.05em'>{sentiment_thai[dominant_sentiment]}</div>",
                        unsafe_allow_html=True
                    )

                fig = px.pie(
                    sentiment_counts,
                    names="sentiment",
                    values="count",
                    color="sentiment",
                    color_discrete_map=sentiment_color_map,
                )
                fig.update_traces(
                    textinfo='percent+label',
                    textposition='inside',
                    marker=dict(line=dict(width=0)),
                    domain=dict(x=[0,1], y=[0,1])
                )
                fig.update_layout(showlegend=False, margin=dict(l=0, r=0, t=0, b=0), height=220)
                st.plotly_chart(fig, use_container_width=True, key=f"pie_{aspect}_{i}_{j}")

    # --- Stacked Bar Chart: Sentiment counts per aspect ---
    sentiment_order = ["positive", "negative", "neutral"]

    bar_df = df_aspect.groupby(["aspect", "sentiment"]).size().reset_index(name="count")
    bar_df["aspect"] = pd.Categorical(bar_df["aspect"], categories=aspects_order, ordered=True)
    bar_df["sentiment"] = pd.Categorical(bar_df["sentiment"], categories=sentiment_order, ordered=True)

    fig_vbar = px.bar(
        bar_df,
        x="aspect",
        y="count",
        color="sentiment",
        color_discrete_map=sentiment_color_map,
        labels={"aspect": "Aspect", "count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå", "sentiment": "Sentiment"},
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ Sentiment ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Aspect (Vertical Stacked Bar)"
    )
    fig_vbar.update_layout(
        barmode="stack",
        xaxis_title="Aspect",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå",
        showlegend=True,
        height=350
    )
    fig_vbar.update_traces(texttemplate=None, textposition=None)

    # Add only one sum number on top of each bar
    total_counts = df_aspect.groupby("aspect")["comment"].count().reindex(aspects_order, fill_value=0)
    for i, aspect in enumerate(aspects_order):
        fig_vbar.add_annotation(
            x=aspect,
            y=total_counts[aspect],
            text=str(total_counts[aspect]),
            showarrow=False,
            font=dict(size=14, color="black"),
            yshift=2,
            yanchor="bottom"
        )

    st.plotly_chart(fig_vbar, use_container_width=True)

    # --- Overall Sentiment Horizontal Bar ---
    overall_counts = df_aspect["sentiment"].value_counts().reindex(sentiment_order, fill_value=0)
    overall_df = pd.DataFrame({
        "Sentiment": sentiment_order,
        "Count": [overall_counts[s] for s in sentiment_order]
    })

    fig_overall = px.bar(
        overall_df,
        x="Count",
        y="Sentiment",
        orientation="h",
        color="Sentiment",
        color_discrete_map=sentiment_color_map,
        title="‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Keyword (‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå)",
        labels={"Count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå", "Sentiment": "Sentiment"}
    )
    fig_overall.update_layout(showlegend=False, xaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå", yaxis_title="Sentiment")
    st.plotly_chart(fig_overall, use_container_width=True)

    # --- Single Horizontal Stacked Bar: Overall Sentiment Distribution ---
    total_comments = overall_counts.sum()
    bar_data = pd.DataFrame({
        "Sentiment": sentiment_order,
        "Count": [overall_counts[s] for s in sentiment_order],
        "Percent": [f"{(overall_counts[s]/total_comments*100):.1f}%" if total_comments > 0 else "0.0%" for s in sentiment_order]
    })

    fig_single_bar = px.bar(
        bar_data,
        x="Count",
        y=["‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å Aspect"] * len(bar_data),
        color="Sentiment",
        color_discrete_map=sentiment_color_map,
        orientation="h",
        text="Percent",
        labels={"Count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå", "Sentiment": "Sentiment"},
        title="‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Keyword (‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô)"
    )
    fig_single_bar.update_layout(
        barmode="stack",
        showlegend=False,
        xaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå",
        yaxis_title="",
        yaxis=dict(showticklabels=False),
        height=300
    )
    fig_single_bar.update_traces(textposition="auto")
    st.plotly_chart(fig_single_bar, use_container_width=True)

    # Download CSV button
    csv = df_aspect.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏• Aspect & Sentiment ‡πÄ‡∏õ‡πá‡∏ô CSV",
        data=csv,
        file_name="aspect_sentiment_output.csv",
        mime="text/csv"
    )

    st.dataframe(df_aspect)
else:
    st.info("‡∏Å‡∏î INITIALIZE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
    aspects_order = []

# --- New Comment Browser Section ---
st.markdown("---")
st.markdown("### üóÇÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° Aspect ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö")

if "comment_aspect_sentiment" in st.session_state and st.session_state["comment_aspect_sentiment"]:
    df_aspect = pd.DataFrame(st.session_state["comment_aspect_sentiment"])
    aspects_order = [a for a in df_aspect["aspect"].unique() if a != "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]
    if "‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" in df_aspect["aspect"].unique():
        aspects_order.append("‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")

    # Select aspect
    selected_aspect = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Aspect ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå",
        aspects_order,
        index=0 if aspects_order else None
    )

    # Select sentiment sort order
    sort_options = {
        "Positive ‚Üí Negative ‚Üí Neutral": ["positive", "negative", "neutral"],
        "Negative ‚Üí Positive ‚Üí Neutral": ["negative", "positive", "neutral"],
        "Neutral ‚Üí Positive ‚Üí Negative": ["neutral", "positive", "negative"]
    }
    selected_sort = st.selectbox(
        "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° Sentiment",
        list(sort_options.keys()),
        index=0
    )
    sort_order = sort_options[selected_sort]

    # Filter and sort comments
    df_browser = df_aspect[df_aspect["aspect"] == selected_aspect]
    df_browser["sentiment"] = pd.Categorical(df_browser["sentiment"], categories=sort_order, ordered=True)
    df_browser = df_browser.sort_values("sentiment")

    st.markdown(f"#### ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô Aspect: {selected_aspect} ({len(df_browser)} ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå)")
    st.dataframe(df_browser[["comment", "sentiment"]], use_container_width=True)
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î INITIALIZE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Aspect & Sentiment ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ")

# -------------------- Sidebar: Configuration & Instructions --------------------

st.sidebar.markdown("## üîë Configuration")
api_key = st.sidebar.text_input(
    "Google Gemini API Key",
    value=st.session_state.get("api_key", ""),
    type="password",
    help="‡πÉ‡∏™‡πà Google Gemini API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å https://makersuite.google.com/app/apikey)"
)
st.session_state["api_key"] = api_key
if not api_key:
    st.sidebar.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

st.sidebar.markdown("---")
st.sidebar.markdown("## ü§ñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI")
model_choice = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini",
    options=[
        "gemini-2.5-pro",
        "gemini-2.5-flash",
        "gemini-2.5-flash-lite-preview-06-17",
        "gemini-2.0-flash",
        "gemini-2.0-flash-lite"
    ],
    index=1 if st.session_state.get("model_choice") is None else
          ["gemini-2.5-pro", "gemini-2.5-flash", "gemini-2.5-flash-lite-preview-06-17", "gemini-2.0-flash", "gemini-2.0-flash-lite"].index(st.session_state.get("model_choice")),
    help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ"
)
st.session_state["model_choice"] = model_choice

# Show model info
model_info = {
    "gemini-2.5-pro": "üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å",
    "gemini-2.5-flash": "‚ö° ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)",
    "gemini-2.5-flash-lite-preview-06-17": "üß™ ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token ‡∏°‡∏≤‡∏Å",
    "gemini-2.0-flash": "‚ö° ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token",
    "gemini-2.0-flash-lite": "üß™ ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token ‡∏°‡∏≤‡∏Å"
}
st.sidebar.info(model_info[model_choice])

st.sidebar.markdown("---")
st.sidebar.markdown("## üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
st.sidebar.markdown("1. ‡∏£‡∏±‡∏ö API Key ‡∏à‡∏≤‡∏Å [Google AI Studio](https://makersuite.google.com/app/apikey)")
st.sidebar.markdown("2. ‡πÉ‡∏™‡πà API Key ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
st.sidebar.markdown("3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
st.sidebar.markdown("4. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")

st.sidebar.markdown("---")
st.sidebar.markdown("## ‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
st.sidebar.markdown("- ‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Pantip")
st.sidebar.markdown("- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢ AI")
st.sidebar.markdown("- API Key ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
st.sidebar.markdown("- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà [Google AI Studio](https://makersuite.google.com/app/apikey)")